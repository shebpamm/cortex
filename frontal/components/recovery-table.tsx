/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/gDj8jGpjaBq
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Progress } from "@/components/ui/progress";
import { useState, useEffect } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { DataTable, wrapSortable } from "./ui/data-table";

import prettyBytes from "pretty-bytes";
import { gql, useQuery } from "@apollo/client";

const GET_RECOVERIES = gql`
  query health {
    recovery {
      indices {
        id
        shards {
          stage
          shardType
          index {
            size {
              totalInBytes
            }
            files {
              percent
            }
          }
        }
      }
    }
  }
`;
export function RecoveryTable() {
  const columns: ColumnDef<any>[] = [
    {
      accessorKey: "index",
      header: wrapSortable.bind(null, "Index"),
    },
    {
      accessorKey: "shard",
      header: wrapSortable.bind(null, "Shard"),
    },
    {
      accessorKey: "stage",
      header: wrapSortable.bind(null, "Stage"),
    },
    {
      accessorKey: "type",
      header: wrapSortable.bind(null, "Type"),
    },
    {
      accessorKey: "size",
      header: wrapSortable.bind(null, "Size"),
      cell: ({ row }) => {
        return prettyBytes(row.original.size);
      },
    },
    {
      accessorKey: "progress",
      header: wrapSortable.bind(null, "Progress"),
      cell: ({ row }) => {
        return <Progress value={row.original.progress} />;
      },
    },
  ];

  const { data, loading, error } = useQuery(GET_RECOVERIES);

  if (loading) {
    return <Progress />;
  }

  if (error) {
    return <div>Error</div>;
  }

  const recoveries = data.recovery;

  console.log(recoveries)

  const tableData = [];

  for (const index of recoveries.indices) {
    const shards: any = index.shards;
    for (const shard of shards) {
      tableData.push({
        index: index.id,
        shard: 0,
        type: shard.shardType,
        stage: shard.stage,
        size: parseInt(shard.index.size.totalInBytes),
        progress: parseInt(shard.index.files.percent.replace("%", "").trim()),
      });
    }
  }

  return (
    <div className="overflow-auto border rounded-lg">
      <DataTable columns={columns} data={tableData} />
    </div>
  );
}

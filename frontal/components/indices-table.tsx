/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/gDj8jGpjaBq
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Progress } from "@/components/ui/progress";
import { useState, useEffect } from "react";
import { ColumnDef } from "@tanstack/react-table";
import { DataTable, wrapSortable } from "./ui/data-table";

import prettyBytes from "pretty-bytes";
import { gql, useQuery } from "@apollo/client";
import { Badge } from "./ui/badge";
import { parseSize } from "@/lib/utils";
import { Dialog, DialogContent, DialogHeader, DialogTrigger } from "./ui/dialog";
import { ShardTable } from "./shard-table";

interface Index {
  index: string;
  status: string;
  health: string;
  docsCount: number;
  storeSize: string;
}

const columns: ColumnDef<Index>[] = [
  {
    accessorKey: "index",
    header: wrapSortable.bind(null, "Index"),
  },
  {
    accessorKey: "status",
    header: wrapSortable.bind(null, "Status"),
    cell: ({ row }) => <Badge variant="outline">{row.original.status}</Badge>,
  },
  {
    accessorKey: "health",
    header: wrapSortable.bind(null, "Health"),
    cell: ({ row }) => (
      <Badge
        variant="outline"
        className={`bg-${row.original.health}-500 text-${row.original.health}-50`}
      >
        {row.original.health}
      </Badge>
    ),
  },
  {
    accessorKey: "docsCount",
    header: wrapSortable.bind(null, "Docs Count"),
  },
  {
    accessorKey: "storeSize",
    header: wrapSortable.bind(null, "Store Size"),
    sortingFn: (a, b, direction) => {
      const sizeA = parseSize(a.original.storeSize);
      const sizeB = parseSize(b.original.storeSize);

      if (direction === "asc") {
        return sizeA - sizeB;
      } else {
        return sizeB - sizeA;
      }
    },
  },
];

const GET_INDICES = gql`
  query GetIndices {
    indices {
      index
      status
      health
      docsCount
      storeSize
    }
  }
`;

export function IndicesTable() {
  const { loading, error, data } = useQuery(GET_INDICES);
  const [ selectedIndex, setSelectedIndex ] = useState("");
  const [ shardViewOpen, setShardViewOpen ] = useState(false);

  const onRowClick = (row : any) => {
    setSelectedIndex(row.original.index);
    setShardViewOpen(true);
  }

  if (loading) {
    return <Progress />;
  }

  if (error) {
    return <div>Error loading indices</div>;
  }

  return (
    <div className="overflow-auto border rounded-lg">
      <Dialog open={shardViewOpen} onOpenChange={() => setShardViewOpen(false)}>
      <DialogTrigger></DialogTrigger>
      <DialogContent
        className={"lg:max-w-screen-lg overflow-y-hide max-h-screen-80"}
      >
        <DialogHeader>Shards for {selectedIndex}</DialogHeader>
        <ShardTable index={selectedIndex} />
      </DialogContent>
      </Dialog>
      <DataTable columns={columns} data={data.indices} onRowClick={onRowClick}/>
    </div>
  );
}

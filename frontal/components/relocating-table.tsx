/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/gDj8jGpjaBq
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Progress } from "@/components/ui/progress"
import { useState, useEffect } from "react"
import { ColumnDef } from "@tanstack/react-table"
import { DataTable, wrapSortable } from "./ui/data-table"

import prettyBytes from 'pretty-bytes';
import { parseSize } from "@/lib/utils"

export function RelocatingTable() {
  const [ relocating, setRelocating ] = useState([])

  useEffect(() => {
    const fetchShards = async () => {
      const response = await fetch("http://localhost:3030/elastic/shards")
      const data = await response.json()
      setRelocating(data)
    }
    fetchShards()
  }, [])

  const columns: ColumnDef<any>[] = [
    {
      accessorKey: "index",
      header: wrapSortable.bind(null, "Index"),
    },
    {
      accessorKey: "shard",
      header: wrapSortable.bind(null, "Shard"),
    },
    {
      accessorKey: "state",
      header: wrapSortable.bind(null, "State"),
    },
    {
      accessorKey: "ip",
      header: wrapSortable.bind(null, "IP"),
    },
    {
      accessorKey: "store",
      header: wrapSortable.bind(null, "Store"),
      sortingFn: (a, b, direction) => {
        if (!a.original.store || !b.original.store) {
          return 0;
        }
        const sizeA = parseSize(a.original.store);
        const sizeB = parseSize(b.original.store);

        if (direction === "asc") {
          return sizeA - sizeB;
        } else {
          return sizeB - sizeA;
        }
      },
    },
  ];

  return (
    <div className="overflow-auto border rounded-lg">
      <DataTable columns={columns} data={relocating} />
    </div>
  )
}
